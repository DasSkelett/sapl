#!/bin/bash

# Copyright (C) 2019 DasSkelett <https://github.com/DasSkelett>
#
# sapl - stream audio of youtube videos and play it via the VLC Media Player
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#### Pathes and files
TMPDIRECTORY=$(ls -t -d -w 1 /tmp/sapl-* 2> /dev/null)
if [[ $? == 0 ]]; then
    TMPDIRECTORY=$(ls -t -d -w 1 /tmp/sapl-* | head -1)
else
    # Resolves to a folder in /tmp, beginning with "sapl-".
    TMPDIRECTORY=$(mktemp -d -t sapl-XXX)
fi

PARSEFILE=$TMPDIRECTORY'/sapl.parsed'
STOPFILE=$TMPDIRECTORY'/sapl.stop'
RUNFILE=$TMPDIRECTORY'/sapl.running'

touch $PARSEFILE

#### FUNCTIONS

mplay() {
    # Now play one after another
    touch $RUNFILE
    for (( i = 0; i < ${#SONGLIST[@]}; i++ )); do
        if [[ -f $STOPFILE || !(-s $PARSEFILE) ]]; then
            rm $STOPFILE
            rm $RUNFILE
            exit
        fi
        youtube-dl -q --no-playlist -o - "$(echo ${SONGLIST[i]##*\ })" | cvlc --quiet --play-and-exit --no-video - #>/dev/null 2>&1
        tail -n +2 "$PARSEFILE" > "$PARSEFILE.tmp" && mv "$PARSEFILE.tmp" "$PARSEFILE"
    done
    rm $RUNFILE
    sapl
}

listqueue() {
    cat -n ${PARSEFILE}
}

parse() {
    tempvar=$(youtube-dl -q --skip-download --no-playlist -x --get-id -e "ytsearch:${1}")
    echo $tempvar >> $PARSEFILE
}

parselink() {
    tempvar=$(youtube-dl -q --skip-download --no-playlist -x --get-id -e "${1}")
    echo $tempvar >> $PARSEFILE
}
parseplaylist() {
    IFS=$'\r\n' GLOBIGNORE='*' command eval 'tempvar1=($(youtube-dl -q --skip-download -x -e "${1}"))'

    IFS=$'\r\n' GLOBIGNORE='*' command eval 'tempvar2=($(youtube-dl -q --skip-download -x --get-id "${1}"))'

    for (( i = 0; i < ${#tempvar1[@]}; i++ )); do
        echo ${tempvar1[i]} >> $PARSEFILE
        echo "$(cat $PARSEFILE) ${tempvar2[i]}" > $PARSEFILE
    done
}

usage() {
    echo "sapl - stream audio of youtube videos and play it via the VLC Media Player
Copyright (C) 2019 DasSkelett <https://github.com/DasSkelett>

usage: sapl <command>
where command is one of:

* help:   show this usage information
* resume: start playing again
* stop:   stop sapl when the current song ends
* add:    search for a video on YouTube and add it to the playlist
* addl:   add link to playlist
* addpl:  add YouTube playlist to sapl playlist
* remove: remove last scheduled video
* list:   list all scheduled videos of the playlist"
}


#### MAIN LOGIC

# Process arguments, see https://stackoverflow.com/a/29754866
#
# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
# ! getopt --test > /dev/null
# if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
#     echo 'I’m sorry, `getopt --test` failed in this environment. GNU-enhanced getopts must be installed.'
#     exit 1
# fi
#
# OPTIONS=hva:lpdsqpr
# LONGOPTS=help,version,add:,addl:,addpl:,delete,remove,stop,quit,pause,return,resume
#
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
# ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
# if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
#     e.g. return value is 1
#      then getopt has complained about wrong arguments to stdout
#     echo "Wrong argument(s)!"
#     exit 2
# fi
#
# read getopt’s output this way to handle the quoting right:
# eval set -- "$PARSED"
#
# now enjoy the options in order and nicely split until we see --
# while true; do
#     case "$1" in
#         -h|--help)
#             usage()
#             shift
#             ;;
#         -v|--version)
#             f=y
#             shift
#             ;;
#         -a|--add)
#             outFile="$2"
#             shift
#             ;;
#         -al|--addl)
#             outFile="$2"
#             shift
#             ;;
#         --)
#             shift
#             break
#             ;;
#         *)
#             echo "Programming error"
#             exit 3
#             ;;
#     esac
# done
#
# handle non-option arguments
# if [[ $# -ne 1 ]]; then
#     echo "$0: A single input string is required."
#     exit 4
# fi

#######

if [[ $1 == "help" || $1 == "--help" || $1 == "-h" ]]; then
    usage
    exit 0
fi

if [[ $1 == "add" ]]; then
    parse "${2}"
    echo "---- Current playlist:"
    listqueue
    exit 0
fi

if [[ $1 == "addl" ]]; then
    parselink "${2}"
    echo "---- Current playlist:"
    listqueue
    exit 0
fi

if [[ $1 == "addpl" ]]; then
    parseplaylist "${2}"
    echo "---- Current playlist:"
    listqueue
    exit 0
fi

if [[ $1 == "remove" || $1 == "delete" ]]; then
    head -n -1 "$PARSEFILE" > "$PARSEFILE.tmp" && mv "$PARSEFILE.tmp" "$PARSEFILE"
    echo "---- Current playlist:"
    listqueue
    exit 0
fi

if [[ $1 == "list" ]]; then
    echo "---- Queued:"
    listqueue
    exit 0
fi

if [[ $1 == "stop" ]]; then
    touch $STOPFILE
    echo "---- Stopping! (After this song...)"
    exit 0
fi

if [[ $1 == "return" || $1 == "resume" ]]; then
    rm $STOPFILE
    echo "---- Returning..."
fi


if [[ !(-s $PARSEFILE) ]]; then
    echo "---- Nothing queued, exiting..."

    if [[ -f $RUNFILE ]]; then
        rm $RUNFILE
    fi
    exit 0
fi


# Read file

IFS=$'\r\n' GLOBIGNORE='*' command eval 'SONGLIST=($(cat ${PARSEFILE}))'


if [[ -f $RUNFILE ]]; then
    echo "---- Already runnig, cancelling."
    exit 1
fi

echo '---- Starting!'
mplay>/dev/null 2>&1 &
